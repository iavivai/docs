#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'google-api-client'
  gem 'googleauth'
  gem 'dotenv'
  gem 'thor'
end

require 'google/apis/docs_v1'
require 'googleauth'
require 'googleauth/stores/file_token_store'
require 'dotenv/load'
require 'thor'

Dotenv.load

class DocsNew < Thor
  USER_ID = 'default'
  OOB_URI = 'urn:ietf:wg:oauth:2.0:oob'

  default_command :start

  desc 'start', "Create a document. With -t <title> option, Create a document with a title."
  option :t
  def start
    execute(options[:t])
  end

  private

  def authorize
    authorizer = Google::Auth::UserAuthorizer.new(
      Google::Auth::ClientId.from_file(File.expand_path('credentials.json', __dir__)),
      Google::Apis::DocsV1::AUTH_DOCUMENTS,
      Google::Auth::Stores::FileTokenStore.new(file: File.expand_path('token.yaml', __dir__))
    )
    credentials = authorizer.get_credentials(USER_ID)

    if credentials.nil?
      puts 'Open the following URL in the browser and enter the ' \
           "resulting code after authorization:\n" + authorizer.get_authorization_url(base_url: OOB_URI)
      code = gets

      credentials = authorizer.get_and_store_credentials_from_code(
        user_id: USER_ID,
        code: code,
        base_url: OOB_URI
      )
      credentials
    end
    credentials
  end

  def execute(title = nil)
    service = Google::Apis::DocsV1::DocsService.new
    service.client_options.application_name = ENV['APPLICATION_NAME']
    service.authorization = authorize

    # TODO: Exception
    doc = service.create_document(Google::Apis::DocsV1::Document.new(title: title || Date.today.strftime('%Y/%m/%d')))
    system("open https://docs.google.com/document/d/#{doc.document_id}/edit")
  end
end

DocsNew.start(ARGV)
